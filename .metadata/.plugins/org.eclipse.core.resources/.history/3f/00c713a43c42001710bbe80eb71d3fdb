package dictionary;

public class Dictionary {
	DictionaryNode header = new DictionaryNode();
	DictionaryNode trailer = new DictionaryNode();
	
	public Dictionary() {
		header.setNext(trailer);
		trailer.setPrev(header);
	}
	
	public void insert(int key, String value){
		DictionaryNode temp = header.next;
		while(temp !=trailer){
			if(temp.key == key){
				if(temp.filled == 10)
					System.out.println("value가 가득 찼습니다");
				else{
					temp.value[temp.filled] = value;
					temp.filled++;
				}
				break;
			}
			temp = temp.next;
		}
		DictionaryNode nodeNew = new DictionaryNode(key, value, trailer.prev, trailer);
		trailer.prev.setNext(nodeNew);
		trailer.setPrev(nodeNew);
	}
	
	public void remove(int key){
		DictionaryNode temp = header.next;
		while(temp !=trailer){
			if(temp.key == key){
				temp.prev.next = temp.next;
				temp.next.prev = temp.prev;
				break;
			}
		}
		System.out.println("삭제하려는 key가 없습니다");		
	}
	
	public String find(int key){
		DictionaryNode temp = header.next;
		while(temp !=trailer){
			if(temp.key == key){
				return temp.value[0];
			}
		}
		System.out.println("찾으려는 key가 없습니다");
		return null;
	}
	public void print(){
		DictionaryNode temp = header.next;
		while(temp !=trailer){
			for(int i = 0; i < temp.filled; i++)
				System.out.println("("+temp.key+","+temp.value[i]+")");
		}
	}
	public void printAll(int key){
		DictionaryNode temp = header.next;
		while(temp !=trailer){
			if(temp.key == key){
				for(int i = 0; i < temp.filled; i++)
					System.out.println("("+temp.key+","+temp.value[i]+")");
				break;
			}
		}
		System.out.println("찾으려는 key가 없습니다");		
	}

}
